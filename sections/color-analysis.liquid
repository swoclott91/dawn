{{ 'section-color-analysis.css' | asset_url | stylesheet_tag }}
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh" defer></script>
<script src="https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0" defer></script>

{%- style -%}
  #Banner-{{ section.id }}::after {
    opacity: {{ section.settings.image_overlay_opacity | divided_by: 100.0 }};
  }
{%- endstyle -%}

{%- liquid
  assign full_width = '100vw'
  assign widths = '375, 550, 750, 1100, 1500, 1780, 2000, 3000, 3840'

  if section.settings.image_behavior == 'ambient'
    assign half_width = '60vw'
    assign full_width = '120vw'
    assign sizes = '(min-width: 750px) 60vw, 120vw'
    assign widths = '450, 660, 900, 1320, 1800, 2136, 2400, 3600, 7680'
  elsif section.settings.image_behavior == 'fixed' or section.settings.image_behavior == 'zoom-in'
    assign half_width = '100vw'
    assign sizes = '100vw'
  else
    assign sizes = '100vw'
  endif
-%}

{%- if section.settings.image_height == 'adapt' and section.settings.image != blank -%}
  {%- style -%}
    @media screen and (max-width: 749px) {
      #Banner-{{ section.id }}::before,
      #Banner-{{ section.id }} .banner__media::before,
      #Banner-{{ section.id }}:not(.banner--mobile-bottom) .banner__content::before {
        padding-bottom: {{ 1 | divided_by: section.settings.image.aspect_ratio | times: 100 }}%;
        content: '';
        display: block;
      }
    }

    @media screen and (min-width: 750px) {
      #Banner-{{ section.id }}::before,
      #Banner-{{ section.id }} .banner__media::before {
        padding-bottom: {{ 1 | divided_by: section.settings.image.aspect_ratio | times: 100 }}%;
        content: '';
        display: block;
      }
    }
  {%- endstyle -%}
{%- endif -%}

<div
  id="Banner-{{ section.id }}"
  class="banner color-analysis banner--{{ section.settings.image_height }}{% if section.settings.image_height == 'adapt' and section.settings.image != blank %} banner--adapt{% endif %} banner--content-align-{{ section.settings.desktop_content_alignment }} banner--content-align-mobile-{{ section.settings.mobile_content_alignment }}{% if section.settings.show_text_below %} banner--mobile-bottom{%- endif -%}{% if section.settings.show_text_box == false %} banner--desktop-transparent{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}"
>
  {%- if section.settings.image != blank -%}
    <div class="banner__media media{% if section.settings.image_behavior != 'none' %} animate--{{ section.settings.image_behavior }}{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
      {{
        section.settings.image
        | image_url: width: 3840
        | image_tag:
          loading: 'lazy',
          width: section.settings.image.width,
          height: section.settings.image.height,
          sizes: sizes,
          widths: widths
      }}
    </div>
  {%- endif -%}

  <div class="banner__content banner__content--{{ section.settings.desktop_content_position }} page-width{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
    <div class="banner__box content-container content-container--full-width-mobile color-{{ section.settings.color_scheme }} gradient">
      <h2 class="color-analysis__title {{ section.settings.heading_size }}">
        {{ section.settings.heading | escape }}
      </h2>
      
      {% if section.settings.description != blank %}
        <div class="color-analysis__description rte">
          {{ section.settings.description }}
        </div>
      {% endif %}

      <button class="button button--primary" id="startAnalysis">
        {{ section.settings.button_text | default: 'Begin Analysis' }}
      </button>
    </div>
  </div>
</div>

<!-- Move modal outside the banner -->
{% comment %} Modal markup moved to root level {% endcomment %}
<div id="camera-container" class="color-analysis__modal">
  <button id="close-camera" class="close-btn">Ã—</button>
  <div class="camera-viewport">
    <video id="camera-feed" autoplay playsinline></video>
    <canvas id="overlay-canvas" class="face-overlay"></canvas>
    <canvas id="canvas" class="hidden"></canvas>
  </div>
  
  <div class="controls">
    <button id="capture-btn" class="control-btn capture-btn"></button>
  </div>

  <div id="loading" class="loading hidden">Processing...</div>
  <div id="status-message" class="status-message">Position your face in the center</div>

  <div class="post-capture-controls hidden">
    <button id="retake-btn" class="button button--primary">
      {{- 'retake-icon.svg' | inline_asset_content -}}
      <span>Retake</span>
    </button>
    <button id="analyze-btn" class="button button--primary">
      {{- 'analyze-icon.svg' | inline_asset_content -}}
      <span>Analyze</span>
    </button>
  </div>
</div>

<style>
  #camera-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: black;
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  #camera-feed {
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: top center;
    background: black;
  }
 
  .camera-viewport {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: flex-start;
    justify-content: center;
  }

  .camera-viewport::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: black;
    z-index: -1;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    pointer-events: none;
  }

  .face-guide {
    width: 80%;
    max-width: 400px;
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .face-outline {
    width: 100%;
    height: 100%;
    stroke: rgba(255, 255, 255, 0.7);
    stroke-width: 10;
    fill: none;
    transition: stroke 0.8s ease;
  }

  .face-outline.positioned {
    stroke: #4CAF50;
  }

  .status-message {
    position: absolute;
    bottom: calc(20vh + 100px);
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-size: 16px;
    font-weight: bold;
    background: rgba(0, 0, 0, 0.5);
    padding: 10px 20px;
    border-radius: 20px;
    text-align: center;
    transition: all 0.3s ease;
  }

  .controls {
    position: absolute;
    bottom: 20vh;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 20px;
    z-index: 10;
  }

  .control-btn {
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.8);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    font-size: 24px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .capture-btn {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    border: 4px solid rgba(255, 255, 255, 0.8);
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
  }

  .capture-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 92px;
    height: 92px;
    border-radius: 50%;
    border: 2px solid rgba(0, 0, 0, 0.2);
    box-sizing: border-box;
  }

  .capture-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.05);
  }

  .capture-btn:active {
    background: rgba(255, 255, 255, 0.4);
    transform: scale(0.95);
  }

  .hidden {
    display: none !important;
  }

  .loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 20px;
    border-radius: 10px;
    font-size: 18px;
  }

  .post-capture-controls {
    position: absolute;
    bottom: 20vh;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    gap: 20px;
    z-index: 10;
  }

  @media (min-height: 800px) {
    .controls {
      bottom: 15vh;
    }

    .post-capture-controls {
      bottom: 15vh;
    }

    .status-message {
      bottom: calc(15vh + 100px);
    }
  }

  @media (max-height: 600px) {
    .controls {
      bottom: 25vh;
    }

    .post-capture-controls {
      bottom: 25vh;
    }

    .status-message {
      bottom: calc(25vh + 100px);
      font-size: 14px;
    }
  }

  @media (max-width: 768px) {
    .capture-btn {
      width: 85px;
      height: 85px;
    }

    .capture-btn::before {
      width: 78px;
      height: 78px;
    }

    .control-btn {
      width: 45px;
      height: 45px;
      font-size: 20px;
    }

    .status-message {
      font-size: 14px;
      bottom: calc(20vh + 90px);
    }

    .close-btn {
      top: 15px;
      right: 15px;
      width: 35px;
      height: 35px;
      font-size: 20px;
    }
  }

  #overlay-canvas {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: auto;
    height: auto;
    max-width: 100%;
    max-height: 100%;
    pointer-events: none;
  }

  #canvas {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: auto;
    height: auto;
    max-width: 100%;
    max-height: 100%;
  }

  .close-btn {
    position: absolute;
    top: 20px;
    right: 20px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.5);
    border: 2px solid rgba(255, 255, 255, 0.8);
    color: white;
    font-size: 24px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 1001;
    padding: 0;
  }

  .close-btn:hover {
    background: rgba(0, 0, 0, 0.7);
    transform: scale(1.1);
  }

  .close-btn:active {
    transform: scale(0.95);
  }

  #retake-btn,
  #analyze-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
  }

  #retake-btn .icon,
  #analyze-btn .icon {
    width: 1em;
    height: 1em;
    fill: currentColor;
    flex-shrink: 0;
  }

  #retake-btn svg,
  #analyze-btn svg {
    width: 1em;
    height: 1em;
    fill: currentColor;
    flex-shrink: 0;
    margin-right: 0.25em;
  }

  #retake-btn span,
  #analyze-btn span {
    display: inline-flex;
    align-items: center;
  }

  
  @media (orientation: portrait) {
    .camera-viewport {
      aspect-ratio: 3/4;
    }
    
    #camera-feed,
    #overlay-canvas,
    #canvas {
      width: 100%;
      height: auto;
      margin-top: 0;
    }
  }

  @media (orientation: landscape) {
    .camera-viewport {
      aspect-ratio: 4/3;
    }
    
    #camera-feed,
    #overlay-canvas,
    #canvas {
      height: 100%;
      width: auto;
    }
  }
</style>

<script type="module">
  import { FilesetResolver, ImageSegmenter } from "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.2";

  class ColorAnalyzer {
    constructor() {
      document.addEventListener('DOMContentLoaded', () => {
        this.initializeElements();
        this.initializeEventListeners();
        this.createImageSegmenter();
      });
    }

    initializeElements() {
      this.container = document.getElementById('camera-container');
      this.video = document.getElementById('camera-feed');
      this.canvas = document.getElementById('canvas');
      this.overlayCanvas = document.getElementById('overlay-canvas');
      this.ctx = this.canvas.getContext('2d');
      this.overlayCtx = this.overlayCanvas.getContext('2d');
      this.startButton = document.getElementById('startAnalysis');
      this.captureButton = document.getElementById('capture-btn');
      this.retakeButton = document.getElementById('retake-btn');
      this.analyzeButton = document.getElementById('analyze-btn');
      this.loadingIndicator = document.getElementById('loading');
      this.statusMessage = document.getElementById('status-message');
      this.postCaptureControls = document.querySelector('.post-capture-controls');
      
      this.stream = null;
      this.isCapturing = false;
      this.segmenter = null;
      this.lastVideoTime = -1;
      this.results = undefined;
      
      this.constraints = {
        video: { 
          facingMode: "user", // Always use front camera
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };
      
      this.faceMesh = null;
      this.lastDetectionTime = 0;
      this.detectionThrottle = 100;
      this.isGoodLighting = false;
      this.isFacePositioned = false;
      this.debug = false;
      
      this.positionThresholds = {
        center: 0.15,
        size: {
          min: 0.3,
          max: 0.7
        }
      };
      
      this.guideConfig = {
        width: 0.5,
        height: 0.6,
        centerX: 0.5,
        centerY: 0.45
      };

      this.lastWebcamTime = -1;
      this.webcamRunning = false;
      this.runningMode = "IMAGE";

      this.closeButton = document.getElementById('close-camera');

      this.lastProcessTime = 0;
      this.processInterval = 100; // Add 100ms delay between updates
    }
    
    initializeEventListeners() {
      this.startButton.addEventListener('click', () => this.openCamera());
      this.captureButton.addEventListener('click', () => this.captureImage());
      this.retakeButton.addEventListener('click', () => this.retakePhoto());
      this.analyzeButton.addEventListener('click', () => this.analyzeImage());
      this.closeButton.addEventListener('click', () => this.closeCamera());
      
      // Add escape key listener
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.container.style.display === 'flex') {
          this.closeCamera();
        }
      });
      
      window.addEventListener('orientationchange', () => {
        setTimeout(() => this.adjustVideoOrientation(), 200);
      });
    }
    
    async createImageSegmenter() {
      try {
        const vision = await FilesetResolver.forVisionTasks(
          "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.2/wasm"
        );
        
        this.segmenter = await ImageSegmenter.createFromOptions(vision, {
          baseOptions: {
            modelAssetPath: "https://storage.googleapis.com/mediapipe-models/image_segmenter/selfie_segmenter/float16/latest/selfie_segmenter.tflite",
            delegate: "GPU"
          },
          runningMode: "VIDEO",
          outputCategoryMask: false,
          outputConfidenceMasks: true
        });

        console.log('Segmentation model loaded successfully');
      } catch (error) {
        console.error('Error initializing vision tasks:', error);
      }
    }

    async openCamera() {
      try {
        this.container.style.display = 'flex';
        await this.startCamera();
        this.webcamRunning = true;
        this.predictWebcam();
      } catch (error) {
        console.error('Camera error:', error);
        this.updateStatus('Error accessing camera: ' + error.message);
      }
    }
    
    async startCamera() {
      if (this.stream) {
        this.stream.getTracks().forEach(track => track.stop());
      }

      try {
        this.stream = await navigator.mediaDevices.getUserMedia(this.constraints);
        this.video.srcObject = this.stream;
        
        await new Promise((resolve) => {
          this.video.onloadedmetadata = () => {
            // Set canvas sizes to match video dimensions
            this.canvas.width = this.video.videoWidth;
            this.canvas.height = this.video.videoHeight;
            this.overlayCanvas.width = this.video.videoWidth;
            this.overlayCanvas.height = this.video.videoHeight;
            resolve();
          };
        });
      } catch (error) {
        throw new Error('Could not start camera: ' + error.message);
      }
    }
    
    adjustVideoOrientation() {
      if (window.orientation === 90 || window.orientation === -90) {
        this.video.style.transform = 'rotate(-90deg)';
      } else {
        this.video.style.transform = 'none';
      }
    }
    
    captureImage() {
      try {
        this.isCapturing = true;
        this.webcamRunning = false;
        
        // Match dimensions of video
        this.canvas.width = this.video.videoWidth;
        this.canvas.height = this.video.videoHeight;
        
        // Clear canvas and draw video frame
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.drawImage(this.video, 0, 0);
        
        // Store image data globally like test client
        this.imageData = this.canvas.toDataURL('image/jpeg'); // Remove quality parameter
        
        // Hide video and overlay elements
        this.video.style.display = 'none';
        this.overlayCanvas.style.display = 'none';
        this.canvas.classList.remove('hidden');
        
        // Update UI controls
        this.postCaptureControls.classList.remove('hidden');
        this.captureButton.classList.add('hidden');
        
        // Update status message
        this.updateStatus('Looks Great! Click analyze to begin analysis.');
      } catch (error) {
        console.error('Capture error:', error);
        this.updateStatus('Failed to capture image. Please try again.');
      }
    }
    
    retakePhoto() {
      this.isCapturing = false;
      this.webcamRunning = true; // Restart webcam predictions
      
      // Show video and overlay again
      this.postCaptureControls.classList.add('hidden');
      this.captureButton.classList.remove('hidden');
      this.canvas.classList.add('hidden');
      this.video.style.display = 'block';
      this.overlayCanvas.style.display = 'block';
      
      this.updateStatus('Position your face within the guide');
      this.predictWebcam(); // Restart the prediction loop
    }
    
    async analyzeImage() {
      try {
        this.loadingIndicator.classList.remove('hidden');
        this.updateStatus('Analyzing your colors...');
        
        // Use stored image data like test client
        if (!this.imageData) {
          throw new Error('No image data available');
        }
        
        // Log the full request for debugging
        const requestData = {
          imageData: this.imageData
        };
        
        console.log('Sending request to server...');
        console.log('Request data:', {
          imageDataLength: requestData.imageData.length,
          imageDataPrefix: requestData.imageData.substring(0, 50)
        });
        
        const response = await fetch('https://api.thecolorcapsule.com/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(requestData)
        });

        console.log('Response status:', response.status);
        const responseText = await response.text();
        console.log('Raw response:', responseText);

        // Try to parse as JSON
        let result;
        try {
          result = JSON.parse(responseText);
        } catch (e) {
          throw new Error(`Invalid JSON response: ${responseText}`);
        }

        if (!result) {
          throw new Error('Empty response from server');
        }

        if (result.error) {
          throw new Error(result.error);
        }

        // New: Validate and extract the new format
        if (!result || result.status !== "success" || !result.data) {
          console.error('Invalid result structure:', result);
          throw new Error('Invalid analysis result structure');
        }
        const data = result.data;
        this.displayResults(data);

      } catch (error) {
        this.updateStatus('Error during analysis: ' + error.message);
        console.error('Analysis error:', error);
        console.error('Error details:', {
          name: error.name,
          message: error.message,
          stack: error.stack
        });
      } finally {
        this.loadingIndicator.classList.add('hidden');
      }
    }
    
    displayResults(results) {
      try {
        // Create results container if it doesn't exist
        let resultsContainer = document.getElementById('analysis-results');
        if (!resultsContainer) {
          resultsContainer = document.createElement('div');
          resultsContainer.id = 'analysis-results';
          this.container.appendChild(resultsContainer);
        }

        // Create formatted results display
        let resultsHtml = `
          <div class="results-container">
            <h2>Analysis Results</h2>
            
            <div class="result-section">
              <h3>Season & Confidence</h3>
              <p>Season: <strong>${results.season}</strong></p>
              <p>Confidence: <strong>${(results.confidence * 100).toFixed(1)}%</strong></p>
            </div>
            
            <div class="result-section">
              <h3>Traits</h3>
              <ul>
                <li>Temperature: ${(results.traits.temperature * 100).toFixed(1)}%</li>
                <li>Depth: ${(results.traits.depth * 100).toFixed(1)}%</li>
                <li>Clarity: ${(results.traits.clarity * 100).toFixed(1)}%</li>
              </ul>
            </div>
            
            <div class="result-section">
              <h3>Undertone Analysis</h3>
              <p>Classification: <strong>${results.undertone.classification}</strong></p>
              <p>Projection: ${(results.undertone.projection * 100).toFixed(1)}%</p>
              <p>Confidence: ${(results.undertone.confidence * 100).toFixed(1)}%</p>
            </div>
            
            <div class="result-section">
              <h3>Sample Statistics</h3>
              <ul>
                <li>Skin Samples: ${results.sample_counts.skin}</li>
                <li>Hair Samples: ${results.sample_counts.hair}</li>
                <li>Iris Samples: ${results.sample_counts.iris}</li>
                <li>Lip Samples: ${results.sample_counts.lips}</li>
                <li>Total Samples: ${results.sample_counts.total}</li>
              </ul>
            </div>
          </div>

          <div class="color-visualization" style="margin-top: 20px;">
            <h3>Analyzed Colors</h3>
            <div style="display: flex; gap: 20px;">
              <div>
                <div>Skin Color</div>
                <div class="color-swatch" style="width: 50px; height: 50px; border: 1px solid black; background-color: rgb(${results.colors.skin.join(',')})" title="RGB: ${results.colors.skin.join(', ')}"></div>
              </div>
              <div>
                <div>Hair Color</div>
                <div class="color-swatch" style="width: 50px; height: 50px; border: 1px solid black; background-color: rgb(${results.colors.hair.join(',')})" title="RGB: ${results.colors.hair.join(', ')}"></div>
              </div>
              <div>
                <div>Eye Color</div>
                <div class="color-swatch" style="width: 50px; height: 50px; border: 1px solid black; background-color: rgb(${results.colors.iris.join(',')})" title="RGB: ${results.colors.iris.join(', ')}"></div>
              </div>
              <div>
                <div>Lip Color</div>
                <div class="color-swatch" style="width: 50px; height: 50px; border: 1px solid black; background-color: rgb(${results.colors.lips.join(',')})" title="RGB: ${results.colors.lips.join(', ')}"></div>
              </div>
            </div>
          </div>
        `;
        
        resultsContainer.innerHTML = resultsHtml;
        this.updateStatus('Analysis complete!');
      } catch (error) {
        console.error('Error displaying results:', error);
        this.updateStatus('Error displaying results: ' + error.message);
      }
    }

    drawGuide() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      
      const guideWidth = this.canvas.width * this.guideConfig.width;
      const guideHeight = this.canvas.height * this.guideConfig.height;
      const centerX = this.canvas.width * this.guideConfig.centerX;
      const centerY = this.canvas.height * this.guideConfig.centerY;
      
      this.ctx.save();
      this.ctx.beginPath();
      this.ctx.ellipse(
        centerX, 
        centerY, 
        guideWidth / 2,
        guideHeight / 2,
        0, 0, 2 * Math.PI
      );
      this.ctx.clip();
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.ctx.strokeStyle = this.isFacePositioned ? '#4CAF50' : '#FFA726';
      this.ctx.lineWidth = 5;
      this.ctx.stroke();
      this.ctx.restore();
    }

    drawPositionArrows(xOffset, yOffset, faceSize) {
      const arrowLength = 30;
      const centerX = this.canvas.width * this.guideConfig.centerX;
      const centerY = this.canvas.height * this.guideConfig.centerY;
      
      this.ctx.save();
      this.ctx.strokeStyle = '#FFA726';
      this.ctx.lineWidth = 5;
      
      if (Math.abs(xOffset) > 0.15) {
        const direction = xOffset > 0 ? -1 : 1;
        this.drawArrow(
          centerX + (direction * this.canvas.width * 0.2),
          centerY,
          direction * arrowLength,
          0
        );
      }
      
      if (Math.abs(yOffset) > 0.15) {
        const direction = yOffset > 0 ? -1 : 1;
        this.drawArrow(
          centerX,
          centerY + (direction * this.canvas.height * 0.2),
          0,
          direction * arrowLength
        );
      }
      
      if (faceSize < 0.3) {
        this.drawText('Move Closer', centerX, centerY + 100);
      } else if (faceSize > 0.7) {
        this.drawText('Move Back', centerX, centerY + 100);
      }
      
      this.ctx.restore();
    }

    drawArrow(x, y, dx, dy) {
      const headLength = 10;
      const angle = Math.atan2(dy, dx);
      
      this.ctx.beginPath();
      this.ctx.moveTo(x, y);
      this.ctx.lineTo(x + dx, y + dy);
      this.ctx.lineTo(
        x + dx - headLength * Math.cos(angle - Math.PI / 6),
        y + dy - headLength * Math.sin(angle - Math.PI / 6)
      );
      this.ctx.moveTo(x + dx, y + dy);
      this.ctx.lineTo(
        x + dx - headLength * Math.cos(angle + Math.PI / 6),
        y + dy - headLength * Math.sin(angle + Math.PI / 6)
      );
      this.ctx.stroke();
    }

    drawText(text, x, y) {
      this.ctx.font = '20px Arial';
      this.ctx.fillStyle = '#FFA726';
      this.ctx.textAlign = 'center';
      this.ctx.fillText(text, x, y);
    }

    async predictWebcam() {
      if (this.video.currentTime === this.lastWebcamTime) {
        if (this.webcamRunning) {
          requestAnimationFrame(this.predictWebcam.bind(this));
        }
        return;
      }

      const currentTime = performance.now();
      if (currentTime - this.lastProcessTime < this.processInterval) {
        if (this.webcamRunning) {
          requestAnimationFrame(this.predictWebcam.bind(this));
        }
        return;
      }

      this.lastWebcamTime = this.video.currentTime;
      this.lastProcessTime = currentTime;
      this.overlayCtx.drawImage(this.video, 0, 0);

      if (!this.segmenter) return;

      // Switch to VIDEO mode if needed
      if (this.runningMode === "IMAGE") {
        this.runningMode = "VIDEO";
        await this.segmenter.setOptions({ runningMode: this.runningMode });
      }

      const startTimeMs = performance.now();
      this.segmenter.segmentForVideo(
        this.video,
        startTimeMs,
        this.processSegmentationResults.bind(this)
      );
    }

    processSegmentationResults(results) {
      if (!results || !this.overlayCtx || !results.confidenceMasks || !results.confidenceMasks[0]) return;

      const mask = results.confidenceMasks[0];
      if (!mask) return;

      // Clear previous drawing
      this.overlayCtx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);

      const maskData = mask.getAsFloat32Array();
      const totalPixels = mask.width * mask.height;
      let personPixels = 0;

      // Create ImageData for the outline
      const imageData = this.overlayCtx.createImageData(mask.width, mask.height);
      const data = imageData.data;

      const threshold = 0.5; // Confidence threshold
      const outlineThickness = 3; // Increase outline thickness

      // First pass: count person pixels
      for (let y = 0; y < mask.height; y++) {
        for (let x = 0; x < mask.width; x++) {
          const i = y * mask.width + x;
          if (maskData[i] > threshold) {
            personPixels++;
          }
        }
      }

      // Calculate percentage once
      const personPercentage = (personPixels / totalPixels) * 100;
      const isIdealPosition = personPercentage >= 11;

      // Second pass: draw thicker outline
      for (let y = outlineThickness; y < mask.height - outlineThickness; y++) {
        for (let x = outlineThickness; x < mask.width - outlineThickness; x++) {
          const i = y * mask.width + x;
          const pixelIndex = i * 4;

          if (maskData[i] > threshold) {
            // Check for edge in a larger neighborhood
            let isEdge = false;
            for (let dy = -outlineThickness; dy <= outlineThickness; dy++) {
              for (let dx = -outlineThickness; dx <= outlineThickness; dx++) {
                const ni = (y + dy) * mask.width + (x + dx);
                if (maskData[ni] <= threshold) {
                  isEdge = true;
                  break;
                }
              }
              if (isEdge) break;
            }

            if (isEdge) {
              // Set consistent color based on position
              data[pixelIndex] = isIdealPosition ? 76 : 255;     // R
              data[pixelIndex + 1] = isIdealPosition ? 175 : 255; // G
              data[pixelIndex + 2] = isIdealPosition ? 80 : 255;  // B
              data[pixelIndex + 3] = 255;                         // A

              // Make outline thicker by coloring neighboring pixels
              for (let dy = -1; dy <= 1; dy++) {
                for (let dx = -1; dx <= 1; dx++) {
                  const ni = ((y + dy) * mask.width + (x + dx)) * 4;
                  data[ni] = data[pixelIndex];
                  data[ni + 1] = data[pixelIndex + 1];
                  data[ni + 2] = data[pixelIndex + 2];
                  data[ni + 3] = data[pixelIndex + 3];
                }
              }
            }
          }
        }
      }

      // Draw the outline
      this.overlayCtx.putImageData(imageData, 0, 0);

      // Update UI
      if (this.captureButton) {
        this.captureButton.disabled = !isIdealPosition;
      }
      
      this.updateStatus(isIdealPosition ? 
        'Perfect! You can take the photo now' : 
        `Position your face to fill more of the frame (${personPercentage.toFixed(1)}%)`
      );

      if (this.webcamRunning) {
        requestAnimationFrame(this.predictWebcam.bind(this));
      }
    }

    updateFeedback(position) {
      let message = '';
      if (!position.isIdeal) {
        if (position.faceSize < 0.3) {
          message = 'Move closer to the camera';
        } else if (position.faceSize > 0.7) {
          message = 'Move back from the camera';
        } else if (position.xOffset > 0.15 || position.yOffset > 0.15) {
          message = 'Center your face in the frame';
        }
      } else {
        message = 'Perfect! You can take the photo now';
      }
      
      this.updateStatus(message);
      this.captureButton.disabled = !position.isIdeal;
    }
    
    updateStatus(message) {
      if (this.statusMessage) {
        this.statusMessage.textContent = message;
      }
    }

    closeCamera() {
      if (this.stream) {
        this.stream.getTracks().forEach(track => track.stop());
      }
      this.container.style.display = 'none';
      this.webcamRunning = false;
      this.isCapturing = false;
      
      // Reset UI elements
      this.video.style.display = 'block';
      this.overlayCanvas.style.display = 'block';
      this.canvas.classList.add('hidden');
      this.postCaptureControls.classList.add('hidden');
      this.captureButton.classList.remove('hidden');
      
      if (this.overlayCtx) {
        this.overlayCtx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
      }
    }
  }

  new ColorAnalyzer();
</script>

{% schema %}
{
  "name": "Color Analysis",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Background Image"
    },
    {
      "type": "range",
      "id": "image_overlay_opacity",
      "min": 0,
      "max": 100,
      "step": 10,
      "unit": "%",
      "label": "Image overlay opacity",
      "default": 0
    },
    {
      "type": "select",
      "id": "image_behavior",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "ambient",
          "label": "Ambient"
        },
        {
          "value": "fixed",
          "label": "Fixed"
        },
        {
          "value": "zoom-in",
          "label": "Zoom In"
        }
      ],
      "default": "none",
      "label": "Image behavior"
    },
    {
      "type": "text",
      "id": "heading",
      "default": "Color Analysis",
      "label": "Heading"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "Small"
        },
        {
          "value": "h1",
          "label": "Medium"
        },
        {
          "value": "h0",
          "label": "Large"
        }
      ],
      "default": "h1",
      "label": "Heading Size"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Begin Analysis"
    },
    {
      "type": "select",
      "id": "image_height",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.image-banner.settings.image_height.options__1.label"
        },
        {
          "value": "small",
          "label": "t:sections.image-banner.settings.image_height.options__2.label"
        },
        {
          "value": "medium",
          "label": "t:sections.image-banner.settings.image_height.options__3.label"
        },
        {
          "value": "large",
          "label": "t:sections.image-banner.settings.image_height.options__4.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.image-banner.settings.image_height.label",
      "info": "t:sections.image-banner.settings.image_height.info"
    },
    {
      "type": "select",
      "id": "desktop_content_position",
      "options": [
        {
          "value": "top-left",
          "label": "Top Left"
        },
        {
          "value": "top-center",
          "label": "Top Center"
        },
        {
          "value": "top-right",
          "label": "Top Right"
        },
        {
          "value": "middle-left",
          "label": "Middle Left"
        },
        {
          "value": "middle-center",
          "label": "Middle Center"
        },
        {
          "value": "middle-right",
          "label": "Middle Right"
        },
        {
          "value": "bottom-left",
          "label": "Bottom Left"
        },
        {
          "value": "bottom-center",
          "label": "Bottom Center"
        },
        {
          "value": "bottom-right",
          "label": "Bottom Right"
        }
      ],
      "default": "middle-center",
      "label": "Desktop Content Position"
    },
    {
      "type": "select",
      "id": "desktop_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center",
      "label": "Desktop Content Alignment"
    },
    {
      "type": "select",
      "id": "mobile_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center",
      "label": "Mobile Content Alignment"
    },
    {
      "type": "checkbox",
      "id": "show_text_box",
      "default": true,
      "label": "Show text box"
    },
    {
      "type": "checkbox",
      "id": "show_text_below",
      "default": true,
      "label": "Show text below section"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    }
  ],
  "presets": [
    {
      "name": "Color Analysis"
    }
  ]
}
{% endschema %}