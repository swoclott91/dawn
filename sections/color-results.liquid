{%- style -%}
  .save-results {
    margin-top: 2rem;
    text-align: center;
  }

  .save-results__button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 2rem;
    background: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    border: none;
    border-radius: var(--buttons-radius);
    cursor: pointer;
    font-size: 1.6rem;
    transition: opacity 0.2s ease;
  }

  .save-results__button:hover {
    opacity: 0.8;
  }

  .sync-status {
    display: none;
    margin-top: 1rem;
    padding: 1rem;
    border-radius: var(--buttons-radius);
    text-align: center;
  }

  .sync-status--success {
    background: rgba(0, 128, 0, 0.1);
    color: rgb(0, 128, 0);
  }

  .sync-status--error {
    background: rgba(255, 0, 0, 0.1);
    color: rgb(255, 0, 0);
  }
{%- endstyle -%}

<div class="color-results page-width">
  <div class="color-results__container">
    <div class="color-results__header">
      <h1 class="color-results__title">Your Color Analysis Results</h1>
      {% unless customer %}
        <div class="save-results">
          <button
            type="button"
            class="save-results__button"
            id="save-results-button"
          >
            {{ 'sections.color_results.save_results' | t }}
          </button>
          <div id="sync-status" class="sync-status"></div>
        </div>
      {% endunless %}
    </div>

    <div class="color-results__content">
      <div class="color-results__season">
        <h2>Your Season</h2>
        <div class="season-display" id="season-display">
          <span class="season-name">Loading...</span>
          <span class="season-confidence"></span>
        </div>
      </div>

      <div class="color-results__traits">
        <h2>Your Color Traits</h2>
        <div class="traits-container">
          <div class="trait">
            <span class="trait-label">Temperature</span>
            <div class="trait-bar">
              <div class="trait-fill" data-trait="temperature"></div>
            </div>
            <span class="trait-value"></span>
          </div>
          <div class="trait">
            <span class="trait-label">Depth</span>
            <div class="trait-bar">
              <div class="trait-fill" data-trait="depth"></div>
            </div>
            <span class="trait-value"></span>
          </div>
          <div class="trait">
            <span class="trait-label">Clarity</span>
            <div class="trait-bar">
              <div class="trait-fill" data-trait="clarity"></div>
            </div>
            <span class="trait-value"></span>
          </div>
        </div>
      </div>

      <div class="color-results__swatches">
        <h2>Your Colors</h2>
        <div class="swatches-container">
          <div class="swatch">
            <div class="swatch-color" data-color="skin"></div>
            <span class="swatch-label">Skin</span>
          </div>
          <div class="swatch">
            <div class="swatch-color" data-color="hair"></div>
            <span class="swatch-label">Hair</span>
          </div>
          <div class="swatch">
            <div class="swatch-color" data-color="iris"></div>
            <span class="swatch-label">Eyes</span>
          </div>
          <div class="swatch">
            <div class="swatch-color" data-color="lips"></div>
            <span class="swatch-label">Lips</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const result = JSON.parse(localStorage.getItem('colorAnalysisResult'));

    if (!result) {
      window.location.href = '/';
      return;
    }

    // Display season
    document.querySelector('.season-name').textContent = result.season;
    document.querySelector('.season-confidence').textContent = `Confidence: ${(result.confidence * 100).toFixed(1)}%`;

    // Display traits
    Object.entries(result.traits).forEach(([trait, value]) => {
      const fill = document.querySelector(`[data-trait="${trait}"]`);
      const valueDisplay = fill.parentElement.nextElementSibling;

      fill.style.width = `${value * 100}%`;
      valueDisplay.textContent = `${(value * 100).toFixed(1)}%`;
    });

    // Display color swatches
    Object.entries(result.colors).forEach(([color, rgb]) => {
      const swatch = document.querySelector(`[data-color="${color}"]`);
      swatch.style.backgroundColor = `rgb(${rgb.join(',')})`;
    });

    // Handle save results button
    const saveButton = document.getElementById('save-results-button');
    if (saveButton) {
      saveButton.addEventListener('click', () => {
        const loginModal = document.getElementById('login-modal');
        if (loginModal) {
          loginModal.classList.add('active');
          document.body.classList.add('login-modal-open');
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Color Results",
  "tag": "section",
  "class": "section",
  "settings": []
}
{% endschema %}
