{%- style -%}
  .color-results {
    padding: 4rem 0;
  }

  .color-results__container {
    max-width: 800px;
    margin: 0 auto;
  }

  .color-results__header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .color-results__title {
    margin-bottom: 2rem;
  }

  .color-results__content {
    display: grid;
    gap: 4rem;
  }

  .color-results__season {
    text-align: center;
  }

  .season-display {
    margin-top: 2rem;
    font-size: 2.4rem;
    font-weight: bold;
  }

  .season-confidence {
    display: block;
    font-size: 1.6rem;
    font-weight: normal;
    margin-top: 1rem;
    opacity: 0.8;
  }

  .color-results__traits {
    text-align: center;
  }

  .traits-container {
    margin-top: 2rem;
    display: grid;
    gap: 2rem;
  }

  .trait {
    display: grid;
    gap: 1rem;
  }

  .trait-label {
    font-weight: bold;
  }

  .trait-bar {
    width: 100%;
    min-width: 200px;
    height: 2.6rem;
    background: #e5e5e5;
    border-radius: var(--buttons-radius);
    overflow: visible;
    position: relative;
  }

  .trait-fill {
    height: 100%;
    background: rgb(var(--color-button));
    transition: width 0.3s ease;
  }

  .trait-value {
    font-size: 1.4rem;
    opacity: 0.8;
  }

  .color-results__swatches {
    text-align: center;
  }

  .swatches-container {
    margin-top: 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 2rem;
  }

  .swatch {
    display: grid;
    gap: 1rem;
  }

  .swatch-color {
    width: 60px;
    height: 60px;
    min-width: 60px;
    min-height: 60px;
    border-radius: var(--buttons-radius);
    border: 1px solid rgba(var(--color-foreground), 0.1);
    margin: 0 auto;
  }

  .swatch-label {
    font-size: 1.4rem;
    font-weight: bold;
  }

  .trait-indicator {
    transition: left 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 2;
    pointer-events: none;
  }

  @media screen and (max-width: 749px) {
    .color-results {
      padding: 2rem 0;
    }

    .color-results__header {
      margin-bottom: 2rem;
    }

    .color-results__content {
      gap: 2rem;
    }

    .season-display {
      font-size: 2rem;
    }

    .swatches-container {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .save-results {
    margin-top: 2rem;
    text-align: center;
  }

  .save-results__button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 2rem;
    background: rgb(var(--color-button));
    color: rgb(var(--color-button-text));
    border: none;
    border-radius: var(--buttons-radius);
    cursor: pointer;
    font-size: 1.6rem;
    transition: opacity 0.2s ease;
  }

  .save-results__button:hover {
    opacity: 0.8;
  }

  .sync-status {
    display: none;
    margin-top: 1rem;
    padding: 1rem;
    border-radius: var(--buttons-radius);
    text-align: center;
  }

  .sync-status--success {
    background: rgba(0, 128, 0, 0.1);
    color: rgb(0, 128, 0);
  }

  .sync-status--error {
    background: rgba(255, 0, 0, 0.1);
    color: rgb(255, 0, 0);
  }
{%- endstyle -%}

<div class="color-results page-width">
  <div class="color-results__container">
    <div class="color-results__header">
      <h1 class="color-results__title">{{ section.settings.title }}</h1>
      {% unless customer %}
        <div class="save-results">
          <button
            type="button"
            class="save-results__button"
            id="save-results-button"
          >
            {{ section.settings.save_button_text }}
          </button>
          <div id="sync-status" class="sync-status"></div>
        </div>
      {% endunless %}
    </div>

    <div class="color-results__content">
      <div class="color-results__season">
        <h2>{{ section.settings.season_title }}</h2>
        <div class="season-display" id="season-display">
          <span class="season-name">Loading...</span>
          <span class="season-confidence"></span>
        </div>
      </div>

      <div class="color-results__traits">
        <h2>{{ section.settings.traits_title }}</h2>
        <div class="traits-container">
          <div class="trait">
            <span class="trait-label">{{ section.settings.temperature_label }}</span>
            <div class="trait-bar" style="position: relative;">
              <div class="trait-indicator" data-trait="temperature"></div>
            </div>
          </div>
          <div class="trait">
            <span class="trait-label">{{ section.settings.depth_label }}</span>
            <div class="trait-bar" style="position: relative;">
              <div class="trait-indicator" data-trait="depth"></div>
            </div>
          </div>
          <div class="trait">
            <span class="trait-label">{{ section.settings.clarity_label }}</span>
            <div class="trait-bar" style="position: relative;">
              <div class="trait-indicator" data-trait="clarity"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="color-results__swatches">
        <h2>{{ section.settings.swatches_title }}</h2>
        <div class="swatches-container">
          <div class="swatch">
            <div class="swatch-color" data-color="skin"></div>
            <span class="swatch-label">{{ section.settings.skin_label }}</span>
          </div>
          <div class="swatch">
            <div class="swatch-color" data-color="hair"></div>
            <span class="swatch-label">{{ section.settings.hair_label }}</span>
          </div>
          <div class="swatch">
            <div class="swatch-color" data-color="iris"></div>
            <span class="swatch-label">{{ section.settings.eyes_label }}</span>
          </div>
          <div class="swatch">
            <div class="swatch-color" data-color="lips"></div>
            <span class="swatch-label">{{ section.settings.lips_label }}</span>
          </div>
        </div>
      </div>

      <div class="color-results__extra">
        <h2>Undertone</h2>
        <div id="undertone-classification"></div>
        <div id="undertone-confidence"></div>
        <div id="undertone-projection"></div>
        <h2>Sample Counts</h2>
        <ul id="sample-counts"></ul>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const inThemeEditor = window.Shopify && window.Shopify.designMode;

    const result = JSON.parse(localStorage.getItem('colorAnalysisResult'));

    if (!result && !inThemeEditor) {
      window.location.href = '/';
      return;
    }

    // If in theme editor, show placeholder data
    if (inThemeEditor && !result) {
      // Example placeholder data
      const placeholder = {
        season: 'Spring',
        confidence: 0.85,
        traits: { temperature: 0.7, depth: 0.5, clarity: 0.8 },
        colors: {
          skin: [255, 224, 189],
          hair: [120, 72, 36],
          iris: [34, 113, 179],
          lips: [200, 80, 100],
        },
      };
      displayResults(placeholder);
      return;
    }

    if (result) {
      displayResults(result);
    }

    function displayResults(data) {
      console.log('Traits:', data.traits); // Debug

      // Display season
      document.querySelector('.season-name').textContent = data.season;
      document.querySelector('.season-confidence').textContent = `Confidence: ${(data.confidence * 100).toFixed(1)}%`;

      // Display traits as indicator circles
      // Temperature: -1 (left) to 1 (right), 0 is center
      const temp = data.traits.temperature;
      const tempPercent = ((temp + 1) / 2) * 100;
      const tempIndicator = document.querySelector('[data-trait="temperature"]');
      if (tempIndicator) {
        tempIndicator.style.left = `calc(${tempPercent}% )`;
        tempIndicator.style.border = '3px solid #fff';
        tempIndicator.style.boxShadow = '0 0 0 2px #222';
        tempIndicator.style.background = '#222';
        tempIndicator.style.width = '2.2rem';
        tempIndicator.style.height = '2.2rem';
        tempIndicator.style.display = 'block';
      }

      // Depth: 0 (left) to 1 (right)
      const depth = data.traits.depth;
      const depthPercent = depth * 100;
      const depthIndicator = document.querySelector('[data-trait="depth"]');
      if (depthIndicator) {
        depthIndicator.style.left = `calc(${depthPercent}% )`;
        depthIndicator.style.background = '#222';
        depthIndicator.style.width = '2.2rem';
        depthIndicator.style.height = '2.2rem';
        depthIndicator.style.borderRadius = '50%';
        depthIndicator.style.transform = 'translate(-50%, -50%)';
        depthIndicator.style.border = '3px solid #fff';
        depthIndicator.style.boxShadow = '0 0 0 2px #222';
      }

      // Clarity: 0 (left) to 1 (right)
      const clarity = data.traits.clarity;
      const clarityPercent = clarity * 100;
      const clarityIndicator = document.querySelector('[data-trait="clarity"]');
      if (clarityIndicator) {
        clarityIndicator.style.left = `calc(${clarityPercent}% )`;
        clarityIndicator.style.background = '#222';
        clarityIndicator.style.width = '2.2rem';
        clarityIndicator.style.height = '2.2rem';
        clarityIndicator.style.borderRadius = '50%';
        clarityIndicator.style.transform = 'translate(-50%, -50%)';
        clarityIndicator.style.border = '3px solid #fff';
        clarityIndicator.style.boxShadow = '0 0 0 2px #222';
      }

      // Display color swatches
      Object.entries(data.colors).forEach(([color, rgb]) => {
        const swatch = document.querySelector(`[data-color="${color}"]`);
        if (swatch) {
          swatch.style.backgroundColor = `rgb(${rgb.join(',')})`;
          swatch.style.border = '2px solid #222'; // debug
        }
      });

      // Undertone
      if (data.undertone) {
        document.getElementById(
          'undertone-classification'
        ).textContent = `Classification: ${data.undertone.classification}`;
        document.getElementById('undertone-confidence').textContent = `Confidence: ${(
          data.undertone.confidence * 100
        ).toFixed(1)}%`;
        document.getElementById('undertone-projection').textContent = `Projection: ${(
          data.undertone.projection * 100
        ).toFixed(1)}%`;
      }

      // Sample counts
      if (data.sample_counts) {
        const sampleCounts = data.sample_counts;
        document.getElementById('sample-counts').innerHTML = `
          <li>Skin: ${sampleCounts.skin}</li>
          <li>Hair: ${sampleCounts.hair}</li>
          <li>Iris: ${sampleCounts.iris}</li>
          <li>Lips: ${sampleCounts.lips}</li>
          <li>Total: ${sampleCounts.total}</li>
        `;
      }
    }

    // Handle save results button
    const saveButton = document.getElementById('save-results-button');
    if (saveButton) {
      saveButton.addEventListener('click', () => {
        const loginModal = document.getElementById('login-modal');
        if (loginModal) {
          loginModal.classList.add('active');
          document.body.classList.add('login-modal-open');
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Color Results",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Your Color Analysis Results"
    },
    {
      "type": "text",
      "id": "save_button_text",
      "label": "Save Results Button Text",
      "default": "Save Results"
    },
    {
      "type": "text",
      "id": "season_title",
      "label": "Season Title",
      "default": "Your Season"
    },
    {
      "type": "text",
      "id": "traits_title",
      "label": "Traits Title",
      "default": "Your Color Traits"
    },
    {
      "type": "text",
      "id": "swatches_title",
      "label": "Swatches Title",
      "default": "Your Colors"
    },
    {
      "type": "text",
      "id": "temperature_label",
      "label": "Temperature Label",
      "default": "Temperature"
    },
    {
      "type": "text",
      "id": "depth_label",
      "label": "Depth Label",
      "default": "Depth"
    },
    {
      "type": "text",
      "id": "clarity_label",
      "label": "Clarity Label",
      "default": "Clarity"
    },
    {
      "type": "text",
      "id": "skin_label",
      "label": "Skin Label",
      "default": "Skin"
    },
    {
      "type": "text",
      "id": "hair_label",
      "label": "Hair Label",
      "default": "Hair"
    },
    {
      "type": "text",
      "id": "eyes_label",
      "label": "Eyes Label",
      "default": "Eyes"
    },
    {
      "type": "text",
      "id": "lips_label",
      "label": "Lips Label",
      "default": "Lips"
    }
  ],
  "presets": [
    {
      "name": "Color Results",
      "category": "Color Analysis"
    }
  ]
}
{% endschema %}
